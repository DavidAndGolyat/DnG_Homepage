{"remainingRequest":"/Users/Yohan/Dropbox/Work/DnG/webpage/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Yohan/Dropbox/Work/DnG/webpage/src/views/Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Yohan/Dropbox/Work/DnG/webpage/src/views/Login.vue","mtime":1556850917103},{"path":"/Users/Yohan/Dropbox/Work/DnG/webpage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Yohan/Dropbox/Work/DnG/webpage/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Yohan/Dropbox/Work/DnG/webpage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Yohan/Dropbox/Work/DnG/webpage/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { LoginCard } from \"@/components\";\nimport Mixins from \"@/plugins/basicMixins\";\nimport { validationMixin } from \"vuelidate\";\nimport { required, minLength, maxLength } from \"vuelidate/lib/validators\";\nimport axios from \"axios\";\nimport codes from \"../assets/client_codes.json\";\n\nexport default {\n  mixins: [Mixins.HeaderImage, validationMixin],\n  name: \"login\",\n  components: {\n    LoginCard\n  },\n  bodyClass: \"login-page\",\n  data: () => ({\n    image: require(\"@/assets/img/DnG/david_donatello_bg.jpg\"),\n    form: {\n      code: null\n    },\n    error: false,\n    client_name: null\n  }),\n  validations: {\n    form: {\n      code: {\n        required,\n        minLength: minLength(8),\n        maxLength: maxLength(8)\n      }\n    }\n  },\n  methods: {\n    submit() {\n      var code = this.form.code;\n      var json = codes;\n      // Validation\n      this.$v.form.$touch();\n      if (this.$v.form.$error) return;\n\n      // Match the code with code file\n      var found = json.find(function(element) {\n        return element.code == code.toUpperCase();\n      });\n\n      if (found) {\n        this.client_name = found.client_name;\n        alert(\"Welcome! \" + this.client_name);\n        this.$router.push({\n          name: \"briefingform\",\n          params: { code: this.client_name }\n        });\n      } else {\n        alert(\"Invalid code!\");\n      }\n    },\n    getValidationClass(fieldName) {\n      const field = this.$v.form[fieldName];\n      if (field) {\n        return {\n          \"md-invalid\": field.$invalid && field.$dirty\n        };\n      }\n    }\n  }\n};\n",{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"wrapper\">\n    <div class=\"section page-header header-filter\" :style=\"headerStyle\">\n      <div class=\"container\">\n        <div class=\"md-layout\">\n          <form novalidate class=\"md-layout\" @submit.prevent=\"submit\">\n            <div\n              class=\"md-layout-item md-size-33 md-small-size-66 md-xsmall-size-100 md-medium-size-40 mx-auto\"\n            >\n              <login-card header-color=\"info\">\n                <h3 slot=\"title\" class=\"card-title\">Briefing Form</h3>\n                <h4 slot=\"title\" class=\"card-title\">Log in using the code</h4>\n                <div class=\"alert alert-danger\" v-if=\"error\">{{ error }}</div>\n                <md-field :class=\"getValidationClass('code')\" slot=\"inputs\">\n                  <md-icon>fingerprint</md-icon>\n                  <label>Client Code...</label>\n                  <md-input name=\"code\" id=\"code\" v-model=\"form.code\"></md-input>\n                  <span class=\"md-error\" v-if=\"!$v.form.code.required\">The code is required</span>\n                  <span class=\"md-error\" v-if=\"!$v.form.code.minLength\">Invalid code</span>\n                  <span class=\"md-error\" v-if=\"!$v.form.code.maxLength\">Invalid code</span>\n                </md-field>\n                <md-button type=\"submit\" slot=\"footer\" class=\"md-simple md-info md-lg\">Log In</md-button>\n              </login-card>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { LoginCard } from \"@/components\";\nimport Mixins from \"@/plugins/basicMixins\";\nimport { validationMixin } from \"vuelidate\";\nimport { required, minLength, maxLength } from \"vuelidate/lib/validators\";\nimport axios from \"axios\";\nimport codes from \"../assets/client_codes.json\";\n\nexport default {\n  mixins: [Mixins.HeaderImage, validationMixin],\n  name: \"login\",\n  components: {\n    LoginCard\n  },\n  bodyClass: \"login-page\",\n  data: () => ({\n    image: require(\"@/assets/img/DnG/david_donatello_bg.jpg\"),\n    form: {\n      code: null\n    },\n    error: false,\n    client_name: null\n  }),\n  validations: {\n    form: {\n      code: {\n        required,\n        minLength: minLength(8),\n        maxLength: maxLength(8)\n      }\n    }\n  },\n  methods: {\n    submit() {\n      var code = this.form.code;\n      var json = codes;\n      // Validation\n      this.$v.form.$touch();\n      if (this.$v.form.$error) return;\n\n      // Match the code with code file\n      var found = json.find(function(element) {\n        return element.code == code.toUpperCase();\n      });\n\n      if (found) {\n        this.client_name = found.client_name;\n        alert(\"Welcome! \" + this.client_name);\n        this.$router.push({\n          name: \"briefingform\",\n          params: { code: this.client_name }\n        });\n      } else {\n        alert(\"Invalid code!\");\n      }\n    },\n    getValidationClass(fieldName) {\n      const field = this.$v.form[fieldName];\n      if (field) {\n        return {\n          \"md-invalid\": field.$invalid && field.$dirty\n        };\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n</style>\n"]}]}